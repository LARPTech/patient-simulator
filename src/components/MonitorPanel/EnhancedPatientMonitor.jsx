import React, { useState, useEffect, useRef, useCallback } from 'react';
import RealisticWaveforms from './RealisticWaveforms';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç—ã —Ñ–∞–π–ª–æ–≤
// import PhysiologicalModel from './physiological-model';
// import RealisticWaveforms from './realistic-waveforms';
// import ClinicalScenarios from './clinical-scenarios';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è EtCO2 (–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ CO2 –≤ –∫–æ–Ω—Ü–µ –≤—ã–¥–æ—Ö–∞)
const EtCO2Display = ({ value = '--', alarmHigh = 45, alarmLow = 30 }) => {
  const [alarmMuted, setAlarmMuted] = useState(false);
  const isAlarm = typeof value === 'number' && (value > alarmHigh || value < alarmLow);
  
  return (
    <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
      <div className="flex justify-between items-center mb-1">
        <div className="text-sm text-blue-400">EtCO2</div>
        <button 
          onClick={() => setAlarmMuted(!alarmMuted)}
          className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded"
        >
          <span className="text-xl">{alarmMuted ? 'üîá' : 'üîä'}</span>
        </button>
      </div>
      <div className="flex-1 flex flex-col items-center justify-center">
        <div className={`text-6xl font-bold ${isAlarm ? 'text-red-600' : 'text-purple-500'}`}>
          {value}
        </div>
        <div className="text-sm text-blue-400">–º–º —Ä—Ç.—Å—Ç.</div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
const TempDisplay = ({ value = '--', alarmHigh = 38.5, alarmLow = 35.5 }) => {
  const [alarmMuted, setAlarmMuted] = useState(false);
  const isAlarm = typeof value === 'number' && (value > alarmHigh || value < alarmLow);
  
  return (
    <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
      <div className="flex justify-between items-center mb-1">
        <div className="text-sm text-blue-400">–¢–ï–ú–ü</div>
        <button 
          onClick={() => setAlarmMuted(!alarmMuted)}
          className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded"
        >
          <span className="text-xl">{alarmMuted ? 'üîá' : 'üîä'}</span>
        </button>
      </div>
      <div className="flex-1 flex flex-col items-center justify-center">
        <div className={`text-6xl font-bold ${isAlarm ? 'text-red-600' : 'text-red-400'}`}>
          {value}
        </div>
        <div className="text-sm text-blue-400">¬∞C</div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–ø–Ω–æ–≥—Ä–∞—Ñ–∏–∏ (EtCO2)
const CapnographyWaveform = ({ etco2Value = 35, respirationRate = 14, isOperating = true }) => {
  const canvasRef = useRef(null);
  const animationRef = useRef(null);
  const [time, setTime] = useState(0);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–∫–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –∫–∞–ø–Ω–æ–≥—Ä–∞—Ñ–∏–∏
  const generateCapnographyPoint = (t, etco2, rr) => {
    // –ü–µ—Ä–∏–æ–¥ –æ–¥–Ω–æ–≥–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const period = 60 / rr;
    
    // –ü–æ–∑–∏—Ü–∏—è –≤ —Ü–∏–∫–ª–µ
    const position = (t % period) / period;
    
    if (position < 0.05) {
      // –§–∞–∑–∞ 1: –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ CO2 (–Ω–∞—á–∞–ª–æ –≤—ã–¥–æ—Ö–∞)
      return (position / 0.05) * etco2;
    } else if (position < 0.25) {
      // –§–∞–∑–∞ 2: –ü–ª–∞—Ç–æ CO2 (–≤—ã–¥–æ—Ö)
      return etco2;
    } else if (position < 0.35) {
      // –§–∞–∑–∞ 3: –ë—ã—Å—Ç—Ä–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ CO2 (–Ω–∞—á–∞–ª–æ –≤–¥–æ—Ö–∞)
      return etco2 * (1 - ((position - 0.25) / 0.1));
    } else {
      // –§–∞–∑–∞ 4: –ë–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è (–≤–¥–æ—Ö)
      return 0;
    }
  };
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
  useEffect(() => {
    if (!canvasRef.current || !isOperating) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const width = canvas.width;
    const height = canvas.height;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const secondsToShow = 10; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –∫–∞–ø–Ω–æ–≥—Ä–∞—Ñ–∏–∏
    const sampleRate = 30;    // 30 —Ç–æ—á–µ–∫ –Ω–∞ —Å–µ–∫—É–Ω–¥—É
    const timeStep = 1 / sampleRate;
    
    // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const animate = () => {
      // –û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞
      ctx.fillStyle = '#000000';
      ctx.fillRect(0, 0, width, height);
      
      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–∫–∏
      ctx.strokeStyle = '#333333';
      ctx.globalAlpha = 0.5;
      ctx.lineWidth = 1;
      
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      for (let i = 1; i < 10; i++) {
        const x = i * (width / 10);
        ctx.beginPath();
        ctx.setLineDash([5, 5]);
        ctx.moveTo(x, 0);
        ctx.lineTo(x, height);
        ctx.stroke();
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        ctx.fillStyle = '#ffffff';
        ctx.font = '10px Arial';
        ctx.fillText(`${i}s`, x - 8, 12);
      }
      
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π EtCO2
      const levels = [0, 20, 40, 60, 80];
      levels.forEach(level => {
        const y = height - (level / 80) * height;
        ctx.beginPath();
        ctx.setLineDash([5, 5]);
        ctx.moveTo(0, y);
        ctx.lineTo(width, y);
        ctx.stroke();
        
        // –ú–µ—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        ctx.fillStyle = '#ffffff';
        ctx.font = '10px Arial';
        ctx.fillText(`${level}`, 5, y - 5);
      });
      
      // –°–±—Ä–æ—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –ø—É–Ω–∫—Ç–∏—Ä–∞
      ctx.globalAlpha = 1.0;
      ctx.setLineDash([]);
      
      // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã, –Ω–µ —Ä–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
      if (!isOperating) {
        animationRef.current = requestAnimationFrame(animate);
        return;
      }
      
      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
      ctx.strokeStyle = '#a855f7'; // –ü—É—Ä–ø—É—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–∞–ø–Ω–æ–≥—Ä–∞—Ñ–∏–∏
      ctx.lineWidth = 2;
      ctx.beginPath();
      
      const pointsToShow = sampleRate * secondsToShow;
      const timeWindow = secondsToShow;
      
      for (let i = 0; i < pointsToShow; i++) {
        const t = time - timeWindow + (i / sampleRate);
        const value = generateCapnographyPoint(t, etco2Value, respirationRate);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–ª—Å—Ç–∞
        const x = (i / pointsToShow) * width;
        const y = height - (value / 80) * height;
        
        if (i === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      
      ctx.stroke();
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
      setTime(prevTime => prevTime + timeStep);
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      animationRef.current = requestAnimationFrame(animate);
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    animate();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
    };
  }, [canvasRef, time, isOperating, etco2Value, respirationRate]);
  
  return (
    <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
      <div className="flex justify-between">
        <div className="text-sm text-blue-400">–ö–ê–ü–ù–û–ì–†–ê–§–ò–Ø</div>
        {!isOperating && <div className="text-sm text-gray-500">DIAGNOSTIC</div>}
      </div>
      <div className="flex-1 mt-1">
        <canvas 
          ref={canvasRef} 
          className="w-full h-full"
          width={600}
          height={150}
        />
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
const PatientStatusIndicator = ({ status }) => {
  const statusInfo = {
    stable: {
      label: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π',
      color: 'bg-green-500',
      description: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã'
    },
    unstable: {
      label: '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π',
      color: 'bg-yellow-500',
      description: '–ï—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã'
    },
    critical: {
      label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
      color: 'bg-red-500',
      description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ'
    },
    arrestImminent: {
      label: '–ü—Ä–µ–¥–æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
      color: 'bg-red-600',
      description: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–¥—Ü–∞'
    },
    arrest: {
      label: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞',
      color: 'bg-red-700',
      description: '–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è'
    }
  };
  
  const currentStatus = statusInfo[status] || statusInfo.stable;
  
  return (
    <div className="flex items-center space-x-2 p-2 border-2 border-gray-600 rounded bg-black">
      <div className={`w-4 h-4 rounded-full ${currentStatus.color}`}></div>
      <div>
        <div className="text-sm font-medium">{currentStatus.label}</div>
        <div className="text-xs text-gray-400">{currentStatus.description}</div>
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–≤–æ–≥
const AlarmHistory = ({ alarms = [] }) => {
  return (
    <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full overflow-hidden">
      <div className="text-sm text-blue-400 mb-2">–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–≤–æ–≥</div>
      <div className="flex-1 overflow-y-auto">
        {alarms.length === 0 ? (
          <div className="text-center text-gray-500 py-4">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥</div>
        ) : (
          <div className="space-y-2">
            {alarms.map((alarm, index) => (
              <div key={index} className="flex items-center p-1 border-b border-gray-800">
                <div className={`w-3 h-3 rounded-full ${
                  alarm.severity === 'high' ? 'bg-red-500' : 
                  alarm.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'
                } mr-2`}></div>
                <div>
                  <div className="text-sm">{alarm.message}</div>
                  <div className="text-xs text-gray-400">{alarm.time}</div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

// –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
const QuickActionButton = ({ icon, label, onClick }) => {
  return (
    <button 
      className="flex flex-col items-center justify-center bg-blue-900 hover:bg-blue-800 text-white p-2 rounded"
      onClick={onClick}
    >
      <span className="text-xl mb-1">{icon}</span>
      <span className="text-xs">{label}</span>
    </button>
  );
};

// –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
const QuickActionsPanel = ({ 
  onIntubate, 
  onDefibrillate,
  onStartCPR,
  onStopCPR,
  onLoadScenarios,
  showCPRControls = false
}) => {
  return (
    <div className="grid grid-cols-6 gap-2 p-2 border-2 border-gray-600 rounded bg-black">
      <QuickActionButton 
        icon="üîÑ" 
        label="–°—Ü–µ–Ω–∞—Ä–∏–∏" 
        onClick={onLoadScenarios}
      />
      <QuickActionButton 
        icon="üíâ" 
        label="–õ–µ–∫–∞—Ä—Å—Ç–≤–∞" 
        onClick={() => console.log("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –ª–µ–∫–∞—Ä—Å—Ç–≤")}
      />
      <QuickActionButton 
        icon="üß™" 
        label="–ê–Ω–∞–ª–∏–∑—ã" 
        onClick={() => console.log("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–æ–≤")}
      />
      <QuickActionButton 
        icon="üìã" 
        label="–ó–∞–ø–∏—Å–∏" 
        onClick={() => console.log("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")}
      />
      <QuickActionButton 
        icon="ü´Å" 
        label="–ò–Ω—Ç—É–±–∞—Ü–∏—è" 
        onClick={onIntubate}
      />
      {showCPRControls ? (
        <QuickActionButton 
          icon="‚úã" 
          label="–°—Ç–æ–ø –°–õ–†" 
          onClick={onStopCPR}
        />
      ) : (
        <QuickActionButton 
          icon="‚ù§Ô∏è" 
          label="–ù–∞—á–∞—Ç—å –°–õ–†" 
          onClick={onStartCPR}
        />
      )}
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
const EnhancedPatientMonitor = () => {
  const [dateTime, setDateTime] = useState(new Date());
  const [isOperating, setIsOperating] = useState(false);
  const [showControlPanel, setShowControlPanel] = useState(false);
  const [showScenariosPanel, setShowScenariosPanel] = useState(false);
  const [patientStatus, setPatientStatus] = useState('stable');
  const [isCPRInProgress, setIsCPRInProgress] = useState(false);
  const [isIntubated, setIsIntubated] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
  const [vitalSigns, setVitalSigns] = useState({
    hr: '--',
    rr: '--',
    spo2: '--',
    systolic: '--',
    diastolic: '--',
    temperature: 36.6,
    etco2: '--',
    cardiac_output: '--',
    stroke_volume: '--',
    intubated: false
  });
  
  // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–≤–æ–≥
  const [alarmHistory, setAlarmHistory] = useState([]);
  
  // –§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª–∞ –±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞)
  const physiologicalModelRef = useRef(null);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏
  useEffect(() => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∏–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    // physiologicalModelRef.current = new PhysiologicalModel();
    
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const simulatePhysiologicalModel = {
      state: {
        hr: 72,
        rr: 14,
        spo2: 98,
        systolic: 120,
        diastolic: 80,
        temperature: 36.6,
        etco2: 35,
        cardiac_output: 5.1,
        stroke_volume: 70,
        intubated: false
      },
      
      startSimulation() {
        console.log("Simulation started");
        return this;
      },
      
      stopSimulation() {
        console.log("Simulation stopped");
        return this;
      },
      
      getState() {
        return { ...this.state };
      },
      
      updatePhysiology() {
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        this.state.hr += (Math.random() * 4 - 2);
        this.state.rr += (Math.random() * 2 - 1);
        this.state.spo2 += (Math.random() * 2 - 1);
        this.state.systolic += (Math.random() * 4 - 2);
        this.state.diastolic += (Math.random() * 4 - 2);
        this.state.temperature += (Math.random() * 0.2 - 0.1);
        this.state.etco2 += (Math.random() * 2 - 1);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        this.state.hr = Math.max(30, Math.min(200, this.state.hr));
        this.state.rr = Math.max(5, Math.min(40, this.state.rr));
        this.state.spo2 = Math.max(60, Math.min(100, this.state.spo2));
        this.state.systolic = Math.max(60, Math.min(220, this.state.systolic));
        this.state.diastolic = Math.max(30, Math.min(140, this.state.diastolic));
        this.state.temperature = Math.max(35, Math.min(42, this.state.temperature));
        this.state.etco2 = Math.max(15, Math.min(80, this.state.etco2));
        
        return { ...this.state };
      },
      
      applyScenario(scenario, params = {}) {
        console.log(`Applying scenario: ${scenario}`, params);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        switch(scenario) {
          case 'hypoxia':
            this.state.spo2 = 88;
            this.state.rr = 22;
            break;
          case 'bradycardia':
            this.state.hr = 40;
            break;
          case 'tachycardia':
            this.state.hr = 140;
            break;
          case 'hypotension':
            this.state.systolic = 80;
            this.state.diastolic = 50;
            this.state.hr = 100;
            break;
          case 'hypertension':
            this.state.systolic = 180;
            this.state.diastolic = 110;
            break;
          case 'respiratory_distress':
            this.state.rr = 30;
            this.state.spo2 = 85;
            this.state.etco2 = 50;
            break;
          case 'bleeding':
            this.state.hr = 130;
            this.state.systolic = 90;
            this.state.diastolic = 60;
            break;
          case 'cardiac_arrest':
            this.state.hr = 0;
            this.state.systolic = 0;
            this.state.diastolic = 0;
            this.state.rr = 0;
            this.state.spo2 = 60;
            this.state.etco2 = 15;
            break;
          default:
            // –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.state.hr = 72;
            this.state.rr = 14;
            this.state.spo2 = 98;
            this.state.systolic = 120;
            this.state.diastolic = 80;
            this.state.temperature = 36.6;
            this.state.etco2 = 35;
            break;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return { ...this.state };
      },
      
      intubate(success = true) {
        this.state.intubated = success;
        if (success) {
          if (this.state.spo2 < 95) {
            this.state.spo2 += 5;
          }
          this.state.etco2 = 35;
        }
        return { ...this.state };
      },
      
      applyMedication(medication, dose) {
        console.log(`Applying medication: ${medication}, dose: ${dose}`);
        
        // –°–∏–º—É–ª—è—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        switch(medication) {
          case 'epinephrine':
            this.state.hr += 25;
            this.state.systolic += 30;
            this.state.diastolic += 15;
            break;
          case 'atropine':
            this.state.hr += 20;
            break;
          case 'norepinephrine':
            this.state.systolic += 40;
            this.state.diastolic += 20;
            break;
          // –î—Ä—É–≥–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞...
        }
        
        return { ...this.state };
      },
      
      startCPR() {
        this.state.etco2 += 10;
        if (this.state.hr === 0) {
          this.state.hr = 40;
        }
        return { ...this.state };
      },
      
      stopCPR() {
        if (this.state.hr < 60) {
          this.state.hr -= 10;
        }
        this.state.etco2 -= 10;
        return { ...this.state };
      }
    };
    
    physiologicalModelRef.current = simulatePhysiologicalModel;
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (physiologicalModelRef.current) {
        physiologicalModelRef.current.stopSimulation();
      }
    };
  }, []);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    const timer = setInterval(() => {
      setDateTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏
  useEffect(() => {
    let simulationInterval;
    
    if (isOperating && physiologicalModelRef.current) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏
      physiologicalModelRef.current.startSimulation();
      
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateVitalSigns();
      
      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      simulationInterval = setInterval(() => {
        updateVitalSigns();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–≤–æ–≥
        checkAlarms();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        updatePatientStatus();
      }, 2000);
    } else if (physiologicalModelRef.current) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
      physiologicalModelRef.current.stopSimulation();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      setVitalSigns({
        hr: '--',
        rr: '--',
        spo2: '--',
        systolic: '--',
        diastolic: '--',
        temperature: 36.6,
        etco2: '--',
        cardiac_output: '--',
        stroke_volume: '--',
        intubated: false
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç—Ä–µ–≤–æ–≥–∏
      setAlarmHistory([]);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞
      setPatientStatus('stable');
    }
    
    return () => clearInterval(simulationInterval);
  }, [isOperating]);
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
  const updateVitalSigns = () => {
    if (physiologicalModelRef.current) {
      const newState = physiologicalModelRef.current.updatePhysiology();
      setVitalSigns(newState);
      setIsIntubated(newState.intubated);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥
  const checkAlarms = () => {
    if (!physiologicalModelRef.current) return;
    
    const state = physiologicalModelRef.current.getState();
    const newAlarms = [];
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–≤–æ–≥–∏
    const alarmTime = new Intl.DateTimeFormat('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }).format(new Date());
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥
    if (state.hr !== '--') {
      if (state.hr > 120) {
        newAlarms.push({
          severity: 'medium',
          message: `–ß–°–° –≤—ã—Å–æ–∫–∞—è: ${Math.round(state.hr)} —É–¥/–º–∏–Ω`,
          time: alarmTime
        });
      } else if (state.hr < 50) {
        newAlarms.push({
          severity: 'high',
          message: `–ß–°–° –Ω–∏–∑–∫–∞—è: ${Math.round(state.hr)} —É–¥/–º–∏–Ω`,
          time: alarmTime
        });
      }
    }
    
    if (state.spo2 !== '--' && state.spo2 < 90) {
      newAlarms.push({
        severity: 'high',
        message: `SpO2 –Ω–∏–∑–∫–∏–π: ${Math.round(state.spo2)}%`,
        time: alarmTime
      });
    }
    
    if (state.systolic !== '--') {
      if (state.systolic > 160) {
        newAlarms.push({
          severity: 'medium',
          message: `–ê–î –≤—ã—Å–æ–∫–æ–µ: ${Math.round(state.systolic)}/${Math.round(state.diastolic)} –º–º —Ä—Ç.—Å—Ç.`,
          time: alarmTime
        });
      } else if (state.systolic < 90) {
        newAlarms.push({
          severity: 'high',
          message: `–ê–î –Ω–∏–∑–∫–æ–µ: ${Math.round(state.systolic)}/${Math.round(state.diastolic)} –º–º —Ä—Ç.—Å—Ç.`,
          time: alarmTime
        });
      }
    }
    
    if (state.temperature > 38.5) {
      newAlarms.push({
        severity: 'medium',
        message: `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ã—à–µ–Ω–∞: ${state.temperature.toFixed(1)}¬∞C`,
        time: alarmTime
      });
    } else if (state.temperature < 35.5) {
      newAlarms.push({
        severity: 'medium',
        message: `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–Ω–∏–∂–µ–Ω–∞: ${state.temperature.toFixed(1)}¬∞C`,
        time: alarmTime
      });
    }
    
    if (state.etco2 !== '--') {
      if (state.etco2 > 45) {
        newAlarms.push({
          severity: 'medium',
          message: `EtCO2 –ø–æ–≤—ã—à–µ–Ω: ${Math.round(state.etco2)} –º–º —Ä—Ç.—Å—Ç.`,
          time: alarmTime
        });
      } else if (state.etco2 < 30) {
        newAlarms.push({
          severity: 'medium',
          message: `EtCO2 –ø–æ–Ω–∏–∂–µ–Ω: ${Math.round(state.etco2)} –º–º —Ä—Ç.—Å—Ç.`,
          time: alarmTime
        });
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–≤–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (newAlarms.length > 0) {
      setAlarmHistory(prev => {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–≤–æ–≥–∞–º–∏
        const updated = [...newAlarms, ...prev].slice(0, 10);
        return updated;
      });
    }
  };
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
  const updatePatientStatus = () => {
    if (!physiologicalModelRef.current) return;
    
    const state = physiologicalModelRef.current.getState();
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if (state.hr === 0 || state.systolic === 0) {
      setPatientStatus('arrest');
    } else if (
      (typeof state.hr === 'number' && state.hr < 40) ||
      (typeof state.systolic === 'number' && state.systolic < 70) ||
      (typeof state.spo2 === 'number' && state.spo2 < 80)
    ) {
      setPatientStatus('arrestImminent');
    } else if (
      (typeof state.hr === 'number' && (state.hr < 50 || state.hr > 150)) ||
      (typeof state.systolic === 'number' && (state.systolic < 80 || state.systolic > 200)) ||
      (typeof state.spo2 === 'number' && state.spo2 < 90)
    ) {
      setPatientStatus('critical');
    } else if (
      (typeof state.hr === 'number' && (state.hr < 60 || state.hr > 120)) ||
      (typeof state.systolic === 'number' && (state.systolic < 100 || state.systolic > 160)) ||
      (typeof state.spo2 === 'number' && state.spo2 < 95)
    ) {
      setPatientStatus('unstable');
    } else {
      setPatientStatus('stable');
    }
  };
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  const formattedDateTime = new Intl.DateTimeFormat('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  }).format(dateTime);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
  const handleStartScenario = (scenarioKey, parameters) => {
    if (physiologicalModelRef.current && isOperating) {
      const updatedState = physiologicalModelRef.current.applyScenario(scenarioKey, parameters);
      setVitalSigns(updatedState);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–≤–æ–≥
      const scenarioNames = {
        hypoxia: '–ì–∏–ø–æ–∫—Å–∏—è',
        bradycardia: '–ë—Ä–∞–¥–∏–∫–∞—Ä–¥–∏—è',
        tachycardia: '–¢–∞—Ö–∏–∫–∞—Ä–¥–∏—è',
        hypotension: '–ì–∏–ø–æ—Ç–µ–Ω–∑–∏—è',
        hypertension: '–ì–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è',
        respiratory_distress: '–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å',
        bleeding: '–ö—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ',
        cardiac_arrest: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–¥—Ü–∞',
        normal: '–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è'
      };
      
      setAlarmHistory(prev => [{
        severity: 'info',
        message: `–ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioNames[scenarioKey] || scenarioKey}`,
        time: new Intl.DateTimeFormat('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }).format(new Date())
      }, ...prev]);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç—É–±–∞—Ü–∏–∏
  const handleIntubate = () => {
    if (physiologicalModelRef.current && isOperating) {
      const success = true; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
      const updatedState = physiologicalModelRef.current.intubate(success);
      setVitalSigns(updatedState);
      setIsIntubated(updatedState.intubated);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç—É–±–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
      setAlarmHistory(prev => [{
        severity: 'info',
        message: success ? '–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç—É–±–∏—Ä–æ–≤–∞–Ω' : '–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω—Ç—É–±–∞—Ü–∏–∏',
        time: new Intl.DateTimeFormat('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }).format(new Date())
      }, ...prev]);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –°–õ–†
  const handleStartCPR = () => {
    if (physiologicalModelRef.current && isOperating) {
      const updatedState = physiologicalModelRef.current.startCPR();
      setVitalSigns(updatedState);
      setIsCPRInProgress(true);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –°–õ–† –≤ –∏—Å—Ç–æ—Ä–∏—é
      setAlarmHistory(prev => [{
        severity: 'high',
        message: '–ù–∞—á–∞—Ç–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-–ª–µ–≥–æ—á–Ω–∞—è —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è',
        time: new Intl.DateTimeFormat('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }).format(new Date())
      }, ...prev]);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –°–õ–†
  const handleStopCPR = () => {
    if (physiologicalModelRef.current && isOperating) {
      const updatedState = physiologicalModelRef.current.stopCPR();
      setVitalSigns(updatedState);
      setIsCPRInProgress(false);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –°–õ–† –≤ –∏—Å—Ç–æ—Ä–∏—é
      setAlarmHistory(prev => [{
        severity: 'info',
        message: '–°–µ—Ä–¥–µ—á–Ω–æ-–ª–µ–≥–æ—á–Ω–∞—è —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞',
        time: new Intl.DateTimeFormat('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        }).format(new Date())
      }, ...prev]);
    }
  };
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ
  const patientInfo = {
    name: "–ü–∞—Ü–∏–µ–Ω—Ç –¢–µ—Å—Ç–æ–≤—ã–π",
    age: 45,
    gender: "–ú—É–∂—Å–∫–æ–π",
    weight: 78,
    height: 176,
    bloodType: "A(II) Rh+",
    diagnosis: "–ü–ª–∞–Ω–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"
  };
  
  return (
    <div className="flex flex-col h-screen bg-black text-white">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="h-12 bg-gray-900 flex justify-between items-center px-4">
        <div className="flex space-x-2">
          <button 
            className="bg-blue-900 text-white px-3 py-1 rounded text-sm"
            onClick={() => setShowControlPanel(true)}
          >
            –ü–∞—Ü–∏–µ–Ω—Ç
          </button>
          <button className="bg-blue-900 text-white px-3 py-1 rounded text-sm">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞
          </button>
          <button className="bg-blue-900 text-white px-3 py-1 rounded text-sm">
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
          </button>
          <button className="bg-blue-900 text-white px-3 py-1 rounded text-sm">
            –ü–µ—á–∞—Ç—å
          </button>
          <button className="bg-blue-900 text-white px-3 py-1 rounded text-sm">
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
          </button>
        </div>
        
        <button 
          className={`px-4 py-1 rounded text-sm ${isOperating ? 'bg-red-800' : 'bg-green-800'}`}
          onClick={() => setIsOperating(!isOperating)}
        >
          {isOperating ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é' : '–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏'}
        </button>
        
        <div className="text-white">{formattedDateTime}</div>
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å */}
      <div className="bg-gray-900 h-10 px-4 flex justify-between items-center">
        <div className="flex items-center space-x-4">
          <div className="text-sm">
            <span className="font-medium">{patientInfo.name}</span> | 
            <span className="ml-1">{patientInfo.age} –ª–µ—Ç, {patientInfo.gender}</span> | 
            <span className="ml-1">{patientInfo.weight} –∫–≥, {patientInfo.height} —Å–º</span>
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          {isIntubated && (
            <div className="px-2 py-0.5 bg-blue-900 text-sm rounded">
              –ò–Ω—Ç—É–±–∏—Ä–æ–≤–∞–Ω
            </div>
          )}
          {isCPRInProgress && (
            <div className="px-2 py-0.5 bg-red-900 text-sm rounded animate-pulse">
              –°–õ–† –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            </div>
          )}
          <PatientStatusIndicator status={patientStatus} />
        </div>
      </div>
      
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <div className="flex-1 grid grid-cols-12 gap-1 p-1">
        {/* –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞) */}
        <div className="col-span-7 grid grid-rows-6 gap-1">
          {/* –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç RealisticWaveforms */}
          <div className="row-span-2 border-2 border-gray-600 rounded bg-black">
            <div className="p-2 h-full">
              <div className="text-sm text-blue-400">ECG: II</div>
              <div className="text-center text-gray-500 mt-8">
                –ì—Ä–∞—Ñ–∏–∫ –≠–ö–ì
              </div>
            </div>
          </div>
          
          <div className="row-span-1 border-2 border-gray-600 rounded bg-black">
            <div className="p-2 h-full">
              <div className="text-sm text-blue-400">RESP</div>
              <div className="text-center text-gray-500 mt-4">
                –ì—Ä–∞—Ñ–∏–∫ –¥—ã—Ö–∞–Ω–∏—è
              </div>
            </div>
          </div>
          
          <div className="row-span-1 border-2 border-gray-600 rounded bg-black">
            <div className="p-2 h-full">
              <div className="text-sm text-blue-400">SpO2</div>
              <div className="text-center text-gray-500 mt-4">
                –ì—Ä–∞—Ñ–∏–∫ –ø—É–ª—å—Å–æ–∫—Å–∏–º–µ—Ç—Ä–∏–∏
              </div>
            </div>
          </div>
          
          <div className="row-span-1">
            <CapnographyWaveform 
              etco2Value={vitalSigns.etco2 === '--' ? 35 : vitalSigns.etco2} 
              respirationRate={vitalSigns.rr === '--' ? 14 : vitalSigns.rr}
              isOperating={isOperating}
            />
          </div>
          
          <div className="row-span-1 grid grid-cols-3 gap-1">
            <QuickActionsPanel 
              onIntubate={handleIntubate}
              onStartCPR={handleStartCPR}
              onStopCPR={handleStopCPR}
              onLoadScenarios={() => setShowScenariosPanel(true)}
              showCPRControls={isCPRInProgress}
            />
            <div className="col-span-2">
              <AlarmHistory alarms={alarmHistory} />
            </div>
          </div>
        </div>
        
        {/* –û–±–ª–∞—Å—Ç—å —Ç—Ä–µ–≤–æ–≥ (—Å—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞) */}
        <div className="col-span-1 grid grid-rows-6 gap-1">
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">–ß–°–°</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">120</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">50</div>
            <div className="flex-1"></div>
          </div>
          
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">–ß–î</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">35</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">8</div>
            <div className="flex-1"></div>
          </div>
          
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">SpO2</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">100</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">90</div>
            <div className="flex-1"></div>
          </div>
          
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">–ê–î</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">160</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">90</div>
            <div className="flex-1"></div>
          </div>
          
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">EtCO2</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">45</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">30</div>
            <div className="flex-1"></div>
          </div>
          
          <div className="flex flex-col items-center bg-red-900 border-2 border-gray-600 rounded p-1 h-full">
            <div className="text-xs text-red-500 mb-1">–¢–ï–ú–ü</div>
            <div className="flex-1"></div>
            <div className="text-sm text-red-500 font-bold">38.5</div>
            <div className="w-6 h-0.5 bg-red-500 my-1"></div>
            <div className="text-sm text-red-500 font-bold">35.5</div>
            <div className="flex-1"></div>
          </div>
        </div>
        
        {/* –û–±–ª–∞—Å—Ç—å —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞) */}
        <div className="col-span-4 grid grid-rows-6 gap-1">
          <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
            <div className="flex justify-between items-center mb-1">
              <div className="text-sm text-blue-400">–ß–°–°</div>
              <button className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded">
                <span className="text-xl">üîä</span>
              </button>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center">
              <div className={`text-6xl font-bold ${
                typeof vitalSigns.hr === 'number' && (vitalSigns.hr > 120 || vitalSigns.hr < 50) 
                  ? 'text-red-600' : 'text-green-500'
              }`}>
                {vitalSigns.hr}
              </div>
              <div className="text-sm text-blue-400">—É–¥/–º–∏–Ω</div>
            </div>
          </div>
          
          <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
            <div className="flex justify-between items-center mb-1">
              <div className="text-sm text-blue-400">–ß–î</div>
              <button className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded">
                <span className="text-xl">üîä</span>
              </button>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center">
              <div className={`text-6xl font-bold ${
                typeof vitalSigns.rr === 'number' && (vitalSigns.rr > 35 || vitalSigns.rr < 8) 
                  ? 'text-red-600' : 'text-yellow-400'
              }`}>
                {vitalSigns.rr}
              </div>
              <div className="text-sm text-blue-400">–≤–¥/–º–∏–Ω</div>
            </div>
          </div>
          
          <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
            <div className="flex justify-between items-center mb-1">
              <div className="text-sm text-blue-400">SpO2</div>
              <button className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded">
                <span className="text-xl">üîä</span>
              </button>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center">
              <div className={`text-6xl font-bold ${
                typeof vitalSigns.spo2 === 'number' && vitalSigns.spo2 < 90
                  ? 'text-red-600' : 'text-cyan-400'
              }`}>
                {vitalSigns.spo2}
              </div>
              <div className="text-sm text-blue-400">%</div>
            </div>
          </div>
          
          <div className="flex flex-col border-2 border-gray-600 rounded bg-black p-2 h-full">
            <div className="flex justify-between items-center mb-1">
              <div className="text-sm text-blue-400">–ê–î</div>
              <button className="w-8 h-8 flex items-center justify-center border border-blue-800 rounded">
                <span className="text-xl">üîä</span>
              </button>
            </div>
            <div className="flex-1 flex flex-col items-center justify-center">
              <div className={`text-5xl font-bold ${
                typeof vitalSigns.systolic === 'number' && (vitalSigns.systolic > 160 || vitalSigns.systolic < 90)
                  ? 'text-red-600' : 'text-orange-400'
              }`}>
                {vitalSigns.systolic}
              </div>
              <div className={`w-24 h-0.5 my-1 ${
                (typeof vitalSigns.systolic === 'number' && (vitalSigns.systolic > 160 || vitalSigns.systolic < 90)) ||
                (typeof vitalSigns.diastolic === 'number' && (vitalSigns.diastolic > 110 || vitalSigns.diastolic < 50))
                  ? 'bg-red-600' : 'bg-orange-400'
              }`}></div>
              <div className={`text-5xl font-bold ${
                typeof vitalSigns.diastolic === 'number' && (vitalSigns.diastolic > 110 || vitalSigns.diastolic < 50)
                  ? 'text-red-600' : 'text-orange-400'
              }`}>
                {vitalSigns.diastolic}
              </div>
              <div className="text-sm text-blue-400">
                {vitalSigns.systolic !== '--' && vitalSigns.diastolic !== '--' 
                  ? `(${Math.round((vitalSigns.systolic + 2 * vitalSigns.diastolic) / 3)})` 
                  : '(--)'} –º–º —Ä—Ç.—Å—Ç.
              </div>
            </div>
          </div>
          
          <EtCO2Display value={vitalSigns.etco2} alarmHigh={45} alarmLow={30} />
          
          <TempDisplay value={vitalSigns.temperature} alarmHigh={38.5} alarmLow={35.5} />
        </div>
      </div>
      
      {/* –ü–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –¥–∏–∞–ª–æ–≥–∏ */}
      {showControlPanel && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75">
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-3xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl text-white font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º</h2>
              <button
                className="text-gray-400 hover:text-white"
                onClick={() => setShowControlPanel(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="grid grid-cols-2 gap-6">
              {/* –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª–∞ –±—ã —Ñ–æ—Ä–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ */}
              <div>
                <h3 className="text-lg text-white font-medium mb-3">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞</h3>
                <p className="text-gray-400">–í —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞.</p>
              </div>
              
              <div>
                <h3 className="text-lg text-white font-medium mb-3">–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</h3>
                <p className="text-gray-400">–ó–¥–µ—Å—å –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.</p>
                
                <div className="mt-4">
                  <button 
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 w-full"
                    onClick={() => {
                      setShowControlPanel(false);
                      setShowScenariosPanel(true);
                    }}
                  >
                    –û—Ç–∫—Ä—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                  </button>
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                onClick={() => setShowControlPanel(false)}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* –ü–∞–Ω–µ–ª—å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ */}
      {showScenariosPanel && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-75">
          <div className="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-4xl">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl text-white font-bold">–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</h2>
              <button
                className="text-gray-400 hover:text-white"
                onClick={() => setShowScenariosPanel(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className="text-center text-gray-400 py-8">
              –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ClinicalScenarios 
              –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            </div>
            
            <div className="mt-6 flex justify-end">
              <button
                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                onClick={() => setShowScenariosPanel(false)}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default EnhancedPatientMonitor;